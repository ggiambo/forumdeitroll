/**
 * This class is generated by jOOQ
 */
package com.forumdeitroll.persistence.jooq.tables;


import com.forumdeitroll.persistence.jooq.Fdtsucker;
import com.forumdeitroll.persistence.jooq.Keys;
import com.forumdeitroll.persistence.jooq.tables.records.MessagesRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Messages extends TableImpl<MessagesRecord> {

	private static final long serialVersionUID = 2058189454;

	/**
	 * The reference instance of <code>fdtsucker.messages</code>
	 */
	public static final Messages MESSAGES = new Messages();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<MessagesRecord> getRecordType() {
		return MessagesRecord.class;
	}

	/**
	 * The column <code>fdtsucker.messages.id</code>.
	 */
	public final TableField<MessagesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>fdtsucker.messages.text</code>.
	 */
	public final TableField<MessagesRecord, String> TEXT = createField("text", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

	/**
	 * The column <code>fdtsucker.messages.date</code>.
	 */
	public final TableField<MessagesRecord, Timestamp> DATE = createField("date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

	/**
	 * The column <code>fdtsucker.messages.subject</code>.
	 */
	public final TableField<MessagesRecord, String> SUBJECT = createField("subject", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

	/**
	 * The column <code>fdtsucker.messages.threadId</code>.
	 */
	public final TableField<MessagesRecord, Integer> THREADID = createField("threadId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>fdtsucker.messages.parentId</code>.
	 */
	public final TableField<MessagesRecord, Integer> PARENTID = createField("parentId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>fdtsucker.messages.author</code>.
	 */
	public final TableField<MessagesRecord, String> AUTHOR = createField("author", org.jooq.impl.SQLDataType.VARCHAR.length(256), this, "");

	/**
	 * The column <code>fdtsucker.messages.forum</code>.
	 */
	public final TableField<MessagesRecord, String> FORUM = createField("forum", org.jooq.impl.SQLDataType.VARCHAR.length(256), this, "");

	/**
	 * The column <code>fdtsucker.messages.visible</code>.
	 */
	public final TableField<MessagesRecord, Byte> VISIBLE = createField("visible", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>fdtsucker.messages.rank</code>.
	 */
	public final TableField<MessagesRecord, Integer> RANK = createField("rank", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>fdtsucker.messages.fakeAuthor</code>.
	 */
	public final TableField<MessagesRecord, String> FAKEAUTHOR = createField("fakeAuthor", org.jooq.impl.SQLDataType.VARCHAR.length(256), this, "");

	/**
	 * Create a <code>fdtsucker.messages</code> table reference
	 */
	public Messages() {
		this("messages", null);
	}

	/**
	 * Create an aliased <code>fdtsucker.messages</code> table reference
	 */
	public Messages(String alias) {
		this(alias, MESSAGES);
	}

	private Messages(String alias, Table<MessagesRecord> aliased) {
		this(alias, aliased, null);
	}

	private Messages(String alias, Table<MessagesRecord> aliased, Field<?>[] parameters) {
		super(alias, Fdtsucker.FDTSUCKER, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<MessagesRecord, Integer> getIdentity() {
		return Keys.IDENTITY_MESSAGES;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<MessagesRecord> getPrimaryKey() {
		return Keys.KEY_MESSAGES_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<MessagesRecord>> getKeys() {
		return Arrays.<UniqueKey<MessagesRecord>>asList(Keys.KEY_MESSAGES_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Messages as(String alias) {
		return new Messages(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Messages rename(String name) {
		return new Messages(name, null);
	}
}
