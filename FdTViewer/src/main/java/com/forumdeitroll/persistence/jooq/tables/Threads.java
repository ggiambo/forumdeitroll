/**
 * This class is generated by jOOQ
 */
package com.forumdeitroll.persistence.jooq.tables;


import com.forumdeitroll.persistence.jooq.Fdtsucker;
import com.forumdeitroll.persistence.jooq.tables.records.ThreadsRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Threads extends TableImpl<ThreadsRecord> {

	private static final long serialVersionUID = 806407633;

	/**
	 * The reference instance of <code>fdtsucker.threads</code>
	 */
	public static final Threads THREADS = new Threads();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ThreadsRecord> getRecordType() {
		return ThreadsRecord.class;
	}

	/**
	 * The column <code>fdtsucker.threads.threadId</code>.
	 */
	public final TableField<ThreadsRecord, Integer> THREADID = createField("threadId", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>fdtsucker.threads.lastId</code>.
	 */
	public final TableField<ThreadsRecord, Integer> LASTID = createField("lastId", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * Create a <code>fdtsucker.threads</code> table reference
	 */
	public Threads() {
		this("threads", null);
	}

	/**
	 * Create an aliased <code>fdtsucker.threads</code> table reference
	 */
	public Threads(String alias) {
		this(alias, THREADS);
	}

	private Threads(String alias, Table<ThreadsRecord> aliased) {
		this(alias, aliased, null);
	}

	private Threads(String alias, Table<ThreadsRecord> aliased, Field<?>[] parameters) {
		super(alias, Fdtsucker.FDTSUCKER, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Threads as(String alias) {
		return new Threads(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Threads rename(String name) {
		return new Threads(name, null);
	}
}
