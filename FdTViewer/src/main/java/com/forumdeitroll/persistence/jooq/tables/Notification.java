/**
 * This class is generated by jOOQ
 */
package com.forumdeitroll.persistence.jooq.tables;


import com.forumdeitroll.persistence.jooq.Fdtsucker;
import com.forumdeitroll.persistence.jooq.Keys;
import com.forumdeitroll.persistence.jooq.tables.records.NotificationRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Notification extends TableImpl<NotificationRecord> {

	private static final long serialVersionUID = -1341719964;

	/**
	 * The reference instance of <code>fdtsucker.notification</code>
	 */
	public static final Notification NOTIFICATION = new Notification();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<NotificationRecord> getRecordType() {
		return NotificationRecord.class;
	}

	/**
	 * The column <code>fdtsucker.notification.id</code>.
	 */
	public final TableField<NotificationRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>fdtsucker.notification.fromNick</code>.
	 */
	public final TableField<NotificationRecord, String> FROMNICK = createField("fromNick", org.jooq.impl.SQLDataType.VARCHAR.length(256).nullable(false), this, "");

	/**
	 * The column <code>fdtsucker.notification.toNick</code>.
	 */
	public final TableField<NotificationRecord, String> TONICK = createField("toNick", org.jooq.impl.SQLDataType.VARCHAR.length(256).nullable(false), this, "");

	/**
	 * The column <code>fdtsucker.notification.msgId</code>.
	 */
	public final TableField<NotificationRecord, Integer> MSGID = createField("msgId", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * Create a <code>fdtsucker.notification</code> table reference
	 */
	public Notification() {
		this("notification", null);
	}

	/**
	 * Create an aliased <code>fdtsucker.notification</code> table reference
	 */
	public Notification(String alias) {
		this(alias, NOTIFICATION);
	}

	private Notification(String alias, Table<NotificationRecord> aliased) {
		this(alias, aliased, null);
	}

	private Notification(String alias, Table<NotificationRecord> aliased, Field<?>[] parameters) {
		super(alias, Fdtsucker.FDTSUCKER, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<NotificationRecord, Integer> getIdentity() {
		return Keys.IDENTITY_NOTIFICATION;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<NotificationRecord> getPrimaryKey() {
		return Keys.KEY_NOTIFICATION_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<NotificationRecord>> getKeys() {
		return Arrays.<UniqueKey<NotificationRecord>>asList(Keys.KEY_NOTIFICATION_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Notification as(String alias) {
		return new Notification(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Notification rename(String name) {
		return new Notification(name, null);
	}
}
